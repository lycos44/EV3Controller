
ssh.settings {
    knownHosts = allowAnyHosts
}

task ('testConnection') {
    doLast {
        ssh.run {
            session(remotes.ev3dev) {
                println "ls ./ev3/ "
                execute "ls ./ev3/ "
            }
        }
    }
}

task ('cleanRemote') {
    doLast {
        ssh.run {
            session(remotes.ev3dev) {
                println "remove from ev3dev "
                execute "ls ./ev3/* "
                execute "rm -Rf ./ev3 "
            }
            session(remotes.raspberrypi) {
                println "remove from raspberrypi "
                execute "ls ./ev3/* "
                execute "rm -Rf ./ev3 "
            }
        }
    }
}

clean.doFirst {
    subprojects.each {
        it.afterEvaluate {
            def cleanTask = it.tasks.findByName('clean')
            if (cleanTask) {
                dependsOn(cleanTask)
            }
        }
    }
}
build.dependsOn clean

task ('deployEV3') {
    doLast {
        ssh.run {
            session(remotes.ev3dev) {
                execute "mkdir -p ./ev3/ "
                put from: "./ev3devRMIServer/build/distributions/ev3devRMIServer-${version}.tar", into: "/home/robot/ev3"
                execute "tar -xf ./ev3/ev3devRMIServer-${version}.tar -C ./ev3/ --touch "
                println "ls -l ./ev3/ "
                execute "ls -l ./ev3/ "
            }
        }
    }
}
deployEV3.dependsOn clean, build, jar, distTar

task ('deployRaspi') {
    doLast {
        ssh.run {
            session(remotes.raspberrypi) {
                execute "mkdir -p ./ev3/ "
                put from: "./raspiRMIClient/build/distributions/raspiRMIClient-${version}.tar", into: "/home/pi/ev3"
                execute "tar -xf ./ev3/raspiRMIClient-${version}.tar -C ./ev3/"
                println "ls -l ./ev3/ "
                execute "ls -l ./ev3/ "
            }
        }
    }
}
deployRaspi.dependsOn build, jar

task ('remoteRun') {
    doLast {
        ssh.run {
            session(remotes.ev3dev) {
                execute "./ev3/ev3devRMIServer-${version}/bin/ev3devRMIServer& "
                println "./ev3/ev3devRMIServer-${version}/bin/ev3devRMIServer& "
            }
        }
    }
}

task ('deployAndRun') {

}
deployAndRun.dependsOn cleanRemote, deployEV3, remoteRun

apply from: 'config.gradle'
